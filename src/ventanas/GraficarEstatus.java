package ventanas;

import java.sql.*;
import clases.Conexion;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Toolkit;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.WindowConstants;

/**
 *
 * @author chepo
 */
public class GraficarEstatus extends javax.swing.JFrame {

    String user;
    int nuevoIngreso, noReparado, enRevision, reparado, entregado;

    String[] vector_estatus_nombre = new String[5];
    int[] vector_estatus_cantidad = new int[5];

    /**
     * Creates new form GraficarEstatus
     */
    public GraficarEstatus() {
        initComponents();
        user = Login.user;

        setSize(550, 450);
        setResizable(false);
        setTitle("Técnico - Sesion de " + user);
        setLocationRelativeTo(null);

        setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);

        //imagen para nuetro jLabel_wallpaper, quiero que abarque todo el tamaño de mi interfaz
        ImageIcon wallpaper = new ImageIcon("src/images/wallpaperPrincipal.jpg");

        //adaptamos la imagen anterior a nuestro JLabel
        Icon icono = new ImageIcon(wallpaper.getImage().getScaledInstance(jLabel_Wallpaper.getWidth(),
                jLabel_Wallpaper.getHeight(), Image.SCALE_DEFAULT));

        //colocamos la imagen dentro del jLabel_Wallpaper
        jLabel_Wallpaper.setIcon(icono);
        this.repaint();

        try {
            Connection cn = Conexion.conectar();
            PreparedStatement pst = cn.prepareStatement(
                    "select estatus, count(estatus) as Cantidad from equipos group by estatus");
            ResultSet rs = pst.executeQuery();

            if (rs.next()) {

                int posicion = 0;

                do {
                    vector_estatus_nombre[posicion] = rs.getString(1);
                    vector_estatus_cantidad[posicion] = rs.getInt(2);

                    if (vector_estatus_nombre[posicion].equalsIgnoreCase("En revision")) {
                        enRevision = vector_estatus_cantidad[posicion];

                    } else if (vector_estatus_nombre[posicion].equalsIgnoreCase("Entregado")) {
                        entregado = vector_estatus_cantidad[posicion];

                    } else if (vector_estatus_nombre[posicion].equalsIgnoreCase("No reparado")) {
                        noReparado = vector_estatus_cantidad[posicion];

                    } else if (vector_estatus_nombre[posicion].equalsIgnoreCase("Nuevo ingreso")) {
                        nuevoIngreso = vector_estatus_cantidad[posicion];

                    } else if (vector_estatus_nombre[posicion].equalsIgnoreCase("Reparado")) {
                        reparado = vector_estatus_cantidad[posicion];
                    }
                    posicion++;
                } while (rs.next());
            }

        } catch (SQLException e) {
            System.err.println("Error al conectar con la base de datos\n -revisa GraficarEstatus" + e);
            JOptionPane.showMessageDialog(null, "ERROR!!, contacte con el administrador.");
        }

        repaint();

    }

    @Override
    //metodo para agregar icono ventana DS
    public Image getIconImage() {
        Image retValue = Toolkit.getDefaultToolkit().getImage(ClassLoader.getSystemResource("images/icon.png"));
        return retValue;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel_Footer = new javax.swing.JLabel();
        jLabel_Wallpaper = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setIconImage(getIconImage());
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Grafica de estatus");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, -1, -1));

        jLabel_Footer.setText("Creado por Luis  ®");
        getContentPane().add(jLabel_Footer, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 380, -1, -1));
        getContentPane().add(jLabel_Wallpaper, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 550, 450));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GraficarEstatus.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GraficarEstatus.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GraficarEstatus.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GraficarEstatus.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GraficarEstatus().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel_Footer;
    private javax.swing.JLabel jLabel_Wallpaper;
    // End of variables declaration//GEN-END:variables

    public int estatusMasRepetido(int nuevoIngreso, int noReparado, int enRevision, int reparado, int entregado) {
        if (nuevoIngreso > noReparado && nuevoIngreso > enRevision && nuevoIngreso > reparado && nuevoIngreso > entregado) {
            return nuevoIngreso;

        } else if (noReparado > enRevision && noReparado > reparado && noReparado > entregado) {
            return noReparado;

        } else if (enRevision > reparado && enRevision > entregado) {
            return enRevision;

        } else if (reparado > entregado) {
            return reparado;

        } else {
            return entregado;
        }
    }

    //Grafica de barras
    @Override
    public void paint(Graphics g) {
        super.paint(g);
        int Estatus_Mas_Repetido = estatusMasRepetido(nuevoIngreso, noReparado, enRevision, reparado, entregado);

        int largo_NuevoIngreso = nuevoIngreso * 400 / Estatus_Mas_Repetido;
        int largo_NoReparado = noReparado * 400 / Estatus_Mas_Repetido;
        int largo_EnRevision = enRevision * 400 / Estatus_Mas_Repetido;
        int largo_Reparado = reparado * 400 / Estatus_Mas_Repetido;
        int largo_Entregado = entregado * 400 / Estatus_Mas_Repetido;

        g.setColor(new Color(240, 248, 0));//amarillo
        g.fillRect(100, 100, largo_NuevoIngreso, 40);
        g.drawString("Nuevo Ingreso", 10, 118);
        g.drawString("Cantidad:" + nuevoIngreso, 10, 133);

        g.setColor(new Color(255, 0, 0));//Rojo
        g.fillRect(100, 150, largo_NoReparado, 40);
        g.drawString("No Reparado", 10, 168);
        g.drawString("Cantidad:" + noReparado, 10, 183);

        g.setColor(new Color(0, 0, 0));//negro
        g.fillRect(100, 200, largo_EnRevision, 40);
        g.drawString("En Revisión", 10, 218);
        g.drawString("Cantidad:" + enRevision, 10, 233);

        g.setColor(new Color(255, 255, 255));//Blanco
        g.fillRect(100, 250, largo_Reparado, 40);
        g.drawString("Reparado", 10, 268);
        g.drawString("Cantidad:" + reparado, 10, 283);

        g.setColor(new Color(0, 85, 0));//Verde
        g.fillRect(100, 300, largo_Entregado, 40);
        g.drawString("Entregado", 10, 318);
        g.drawString("Cantidad:" + entregado, 10, 333);

    }

}
